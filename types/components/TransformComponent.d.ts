import type { Option } from "@aicacia/core";
import { mat2d, mat4, quat, vec2, vec3 } from "gl-matrix";
import type { Entity } from "../Entity";
import { RenderableComponent } from "./RenderableComponent";
import { TransformComponentManager } from "./TransformComponentManager";
export declare abstract class TransformComponent extends RenderableComponent {
    static Manager: typeof TransformComponentManager;
    static getParentTransform(entity: Entity): Option<TransformComponent>;
    static getTransform(entity: Entity): Option<TransformComponent>;
    static getRequiredTransform(entity: Entity): TransformComponent;
    private needsUpdate;
    private localNeedsUpdate;
    onDetach(): this;
    getParentTransform(): Option<TransformComponent>;
    setNeedsUpdate(needsUpdate?: boolean): this;
    getNeedsUpdate(): boolean;
    setLocalNeedsUpdate(localNeedsUpdate?: boolean): this;
    getLocalNeedsUpdate(): boolean;
    updateLocalMatrixIfNeeded(): this;
    updateMatrixIfNeeded(): this;
    translate2(position: vec2): this;
    translate3(position: vec3): this;
    scale2(scale: vec2): this;
    scale3(scale: vec3): this;
    abstract updateLocalMatrix(): this;
    abstract updateMatrix(): this;
    abstract getMatrix2d(out: mat2d): mat2d;
    abstract getMatrix4(out: mat4): mat4;
    abstract getLocalMatrix2d(out: mat2d): mat2d;
    abstract getLocalMatrix4(out: mat4): mat4;
    abstract getLocalPosition2(out: vec2): vec2;
    abstract getLocalPosition3(out: vec3): vec3;
    abstract setLocalPosition2(localPosition: vec2): this;
    abstract setLocalPosition3(localPosition: vec3): this;
    abstract getLocalRotationZ(): number;
    abstract getLocalRotationQuat(out: quat): quat;
    abstract setLocalRotationZ(localRotation: number): this;
    abstract setLocalRotationQuat(localRotation: quat): this;
    abstract getLocalScale2(out: vec2): vec2;
    abstract getLocalScale3(out: vec3): vec3;
    abstract setLocalScale2(localScale: vec2): this;
    abstract setLocalScale3(localScale: vec3): this;
    abstract getPosition2(out: vec2): vec2;
    abstract getPosition3(out: vec3): vec3;
    abstract getRotationZ(): number;
    abstract getRotationQuat(out: quat): quat;
    abstract getScale2(out: vec2): vec2;
    abstract getScale3(out: vec3): vec3;
}
