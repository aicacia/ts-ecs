import { Option } from "@aicacia/core";
import type { IConstructor } from "@aicacia/core";
import { Plugin } from "../../Plugin";
import { InputAxis } from "./InputAxis";
import { InputButton } from "./InputButton";
import { InputHandler } from "./InputHandler";
import type { EventListener } from "./EventListener";
import type { InputEvent } from "./InputEvent";
import { IJSONObject } from "@aicacia/json";
export declare type IInputEventTypes = {
    "add-input_handler": (handler: InputHandler) => void;
    "remove-input_handler": (handler: InputHandler) => void;
    "add-event_listener": (listener: EventListener) => void;
    "remove-event_listener": (listener: EventListener) => void;
} & {
    [name: string]: (event: InputEvent) => void;
};
export declare class Input extends Plugin<IInputEventTypes> {
    private events;
    private inputHandlers;
    private inputHandlerMap;
    private eventListeners;
    private eventListenerMap;
    private buttons;
    private axes;
    constructor();
    queueEvent(event: InputEvent): this;
    addAxes(axes: InputAxis[]): this;
    addAxis(...axes: InputAxis[]): this;
    getAxis(name: string): Option<InputAxis>;
    getAxisValue(name: string): number;
    getRequiredAxis(name: string): InputAxis;
    getInputHandler<I extends InputHandler = InputHandler>(InputHandler: IConstructor<I>): Option<InputHandler<Input>>;
    getRequiredInputHandler<I extends InputHandler = InputHandler>(InputHandler: IConstructor<I>): InputHandler<Input>;
    getEventListener<I extends EventListener = EventListener>(EventListener: IConstructor<I>): Option<EventListener<Input>>;
    getRequiredEventListener<I extends EventListener = EventListener>(EventListener: IConstructor<I>): EventListener<Input>;
    removeAxes(axes: InputAxis[]): this;
    removeAxis(...axes: InputAxis[]): this;
    addInputHandlers(inputHandlers: InputHandler[]): this;
    addInputHandler(...inputHandlers: InputHandler[]): this;
    removeInputHandlers(inputHandlers: IConstructor<InputHandler>[]): this;
    removeInputHandler(...inputHandlers: IConstructor<InputHandler>[]): this;
    addEventListeners(eventListeners: EventListener[]): this;
    addEventListener(...eventListeners: EventListener[]): this;
    removeEventListeners(EventListeners: IConstructor<EventListener>[]): this;
    removeEventListener(...eventListeners: IConstructor<EventListener>[]): this;
    getOrCreateButton(name: string): InputButton;
    getButton(name: string): Option<InputButton>;
    getButtonValue(name: string): number;
    isDownCurrentFrame(name: string): boolean;
    isDown(name: string): boolean;
    isUpCurrentFrame(name: string): boolean;
    isUp(name: string): boolean;
    onUpdate(): this;
    onAfterUpdate(): this;
    private _addAxis;
    private _removeAxis;
    private updateAxes;
    private updateAxis;
    private _addInputHandler;
    private _removeInputHandler;
    private _addEventListener;
    private _removeEventListener;
    toJSON(): IJSONObject;
    fromJSON(json: IJSONObject): this;
}
